{"message":"unused import: `Read`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"lib_network/src/netchannel.rs","byte_start":728,"byte_end":732,"line_start":17,"line_end":17,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"use std::io::{Read, Write};","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"lib_network/src/netchannel.rs","byte_start":728,"byte_end":734,"line_start":17,"line_end":17,"column_start":15,"column_end":21,"is_primary":true,"text":[{"text":"use std::io::{Read, Write};","highlight_start":15,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Read`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/netchannel.rs:17:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::io::{Read, Write};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `TxId`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":560,"byte_end":564,"line_start":12,"line_end":12,"column_start":57,"column_end":61,"is_primary":true,"text":[{"text":"use lib_chain::block::{BlockNode, Transaction, BlockId, TxId};","highlight_start":57,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":558,"byte_end":564,"line_start":12,"line_end":12,"column_start":55,"column_end":61,"is_primary":true,"text":[{"text":"use lib_chain::block::{BlockNode, Transaction, BlockId, TxId};","highlight_start":55,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `TxId`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:12:57\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse lib_chain::block::{BlockNode, Transaction, BlockId, TxId};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"unused imports: `HashMap`, `HashSet`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":616,"byte_end":623,"line_start":14,"line_end":14,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"use std::collections::{HashMap, BTreeMap, HashSet};","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":635,"byte_end":642,"line_start":14,"line_end":14,"column_start":43,"column_end":50,"is_primary":true,"text":[{"text":"use std::collections::{HashMap, BTreeMap, HashSet};","highlight_start":43,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":616,"byte_end":625,"line_start":14,"line_end":14,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"use std::collections::{HashMap, BTreeMap, HashSet};","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":633,"byte_end":642,"line_start":14,"line_end":14,"column_start":41,"column_end":50,"is_primary":true,"text":[{"text":"use std::collections::{HashMap, BTreeMap, HashSet};","highlight_start":41,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `HashMap`, `HashSet`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:14:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::collections::{HashMap, BTreeMap, HashSet};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `convert`, `io`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":722,"byte_end":729,"line_start":16,"line_end":16,"column_start":11,"column_end":18,"is_primary":true,"text":[{"text":"use std::{convert, io};","highlight_start":11,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":731,"byte_end":733,"line_start":16,"line_end":16,"column_start":20,"column_end":22,"is_primary":true,"text":[{"text":"use std::{convert, io};","highlight_start":20,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":712,"byte_end":735,"line_start":16,"line_end":16,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use std::{convert, io};","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `convert`, `io`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:16:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{convert, io};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\n"}
{"message":"unused imports: `Ipv4Addr`, `SocketAddrV4`, `SocketAddr`, `ToSocketAddrs`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":775,"byte_end":785,"line_start":17,"line_end":17,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"use std::net::{TcpListener, TcpStream, SocketAddr, ToSocketAddrs, SocketAddrV4, Ipv4Addr};","highlight_start":40,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":787,"byte_end":800,"line_start":17,"line_end":17,"column_start":52,"column_end":65,"is_primary":true,"text":[{"text":"use std::net::{TcpListener, TcpStream, SocketAddr, ToSocketAddrs, SocketAddrV4, Ipv4Addr};","highlight_start":52,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":802,"byte_end":814,"line_start":17,"line_end":17,"column_start":67,"column_end":79,"is_primary":true,"text":[{"text":"use std::net::{TcpListener, TcpStream, SocketAddr, ToSocketAddrs, SocketAddrV4, Ipv4Addr};","highlight_start":67,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":816,"byte_end":824,"line_start":17,"line_end":17,"column_start":81,"column_end":89,"is_primary":true,"text":[{"text":"use std::net::{TcpListener, TcpStream, SocketAddr, ToSocketAddrs, SocketAddrV4, Ipv4Addr};","highlight_start":81,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":773,"byte_end":824,"line_start":17,"line_end":17,"column_start":38,"column_end":89,"is_primary":true,"text":[{"text":"use std::net::{TcpListener, TcpStream, SocketAddr, ToSocketAddrs, SocketAddrV4, Ipv4Addr};","highlight_start":38,"highlight_end":89}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Ipv4Addr`, `SocketAddrV4`, `SocketAddr`, `ToSocketAddrs`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:17:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::net::{TcpListener, TcpStream, SocketAddr, ToSocketAddrs, SocketAddrV4, Ipv4Addr};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `mpsc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":910,"byte_end":914,"line_start":20,"line_end":20,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use std::sync::{mpsc, Arc, Mutex};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":910,"byte_end":916,"line_start":20,"line_end":20,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"use std::sync::{mpsc, Arc, Mutex};","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `mpsc`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::sync::{mpsc, Arc, Mutex};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::time::Duration`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":933,"byte_end":952,"line_start":21,"line_end":21,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"use std::time::Duration;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":929,"byte_end":953,"line_start":21,"line_end":21,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"use std::time::Duration;","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::time::Duration`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::time::Duration;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`await` is only allowed inside `async` functions and blocks","code":{"code":"E0728","explanation":"[`await`] has been used outside [`async`] function or [`async`] block.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0728\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nfn foo() {\n    wake_and_yield_once().await // `await` is used outside `async` context\n}\n```\n\n[`await`] is used to suspend the current computation until the given\nfuture is ready to produce a value. So it is legal only within\nan [`async`] context, like an `async` function or an `async` block.\n\n```edition2018\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nasync fn foo() {\n    wake_and_yield_once().await // `await` is used within `async` function\n}\n\nfn bar(x: u8) -> impl Future<Output = u8> {\n    async move {\n        wake_and_yield_once().await; // `await` is used within `async` block\n        x\n    }\n}\n```\n\n[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n[`await`]: https://doc.rust-lang.org/std/keyword.await.html\n"},"level":"error","spans":[{"file_name":"/Users/suenkoh/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.28/src/async_await/select_mod.rs","byte_start":13076,"byte_end":13146,"line_start":321,"line_end":323,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            $crate::select_internal! {","highlight_start":13,"highlight_end":39},{"text":"                $( $tokens )*","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"only allowed inside `async` functions and blocks","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/suenkoh/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.28/src/async_await/select_mod.rs","byte_start":13076,"byte_end":13146,"line_start":321,"line_end":323,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            $crate::select_internal! {","highlight_start":13,"highlight_end":39},{"text":"                $( $tokens )*","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":9693,"byte_end":11747,"line_start":205,"line_end":239,"column_start":29,"column_end":30,"is_primary":false,"text":[{"text":"                            select! {","highlight_start":29,"highlight_end":38},{"text":"                                block = sender_clone.recv() => {","highlight_start":1,"highlight_end":65},{"text":"                                    let msg = format!(\"block:{}\\n\", serde_json::to_string(&block.unwrap()).unwrap());","highlight_start":1,"highlight_end":118},{"text":"                                    if let Err(e) = writer.write(msg.as_bytes()) {","highlight_start":1,"highlight_end":83},{"text":"                                        println!(\"Error: {}\", e);","highlight_start":1,"highlight_end":66},{"text":"                                        break;","highlight_start":1,"highlight_end":47},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if let Err(e) = writer.flush() {","highlight_start":1,"highlight_end":69},{"text":"                                        println!(\"Error: {}\", e);","highlight_start":1,"highlight_end":66},{"text":"                                        break;","highlight_start":1,"highlight_end":47},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                tx = sender_clone2.recv() => {","highlight_start":1,"highlight_end":63},{"text":"                                    let msg = format!(\"tx:{}\\n\", serde_json::to_string(&tx.unwrap()).unwrap());","highlight_start":1,"highlight_end":112},{"text":"                                    if let Err(e) = writer.write(msg.as_bytes()) {","highlight_start":1,"highlight_end":83},{"text":"                                        println!(\"Error: {}\", e);","highlight_start":1,"highlight_end":66},{"text":"                                        break;","highlight_start":1,"highlight_end":47},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if let Err(e) = writer.flush() {","highlight_start":1,"highlight_end":69},{"text":"                                        println!(\"Error: {}\", e);","highlight_start":1,"highlight_end":66},{"text":"                                        break;","highlight_start":1,"highlight_end":47},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                block_id = sender_clone3.recv() => {","highlight_start":1,"highlight_end":69},{"text":"                                    let msg = format!(\"block_id:{}\\n\", serde_json::to_string(&block_id.unwrap()).unwrap());","highlight_start":1,"highlight_end":124},{"text":"                                    if let Err(e) = writer.write(msg.as_bytes()) {","highlight_start":1,"highlight_end":83},{"text":"                                        println!(\"Error: {}\", e);","highlight_start":1,"highlight_end":66},{"text":"                                        break;","highlight_start":1,"highlight_end":47},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if let Err(e) = writer.flush() {","highlight_start":1,"highlight_end":69},{"text":"                                        println!(\"Error: {}\", e);","highlight_start":1,"highlight_end":66},{"text":"                                        break;","highlight_start":1,"highlight_end":47},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"select!","def_site_span":{"file_name":"/Users/suenkoh/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-util-0.3.28/src/async_await/select_mod.rs","byte_start":12957,"byte_end":12976,"line_start":318,"line_end":318,"column_start":5,"column_end":24,"is_primary":false,"text":[{"text":"    macro_rules! select {","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::select_internal!","def_site_span":{"file_name":"/Users/suenkoh/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-macro-0.3.28/src/lib.rs","byte_start":941,"byte_end":998,"line_start":38,"line_end":38,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn select_internal(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":9558,"byte_end":9565,"line_start":202,"line_end":202,"column_start":40,"column_end":47,"is_primary":false,"text":[{"text":"                    std::thread::spawn(move || {","highlight_start":40,"highlight_end":47}],"label":"this is not `async`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0728]\u001b[0m\u001b[0m\u001b[1m: `await` is only allowed inside `async` functions and blocks\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:205:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                    std::thread::spawn(move || {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is not `async`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            select! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                block = sender_clone.recv() => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    let msg = format!(\"block:{}\\n\", serde_json::to_string(&block.unwrap()).unwrap());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    if let Err(e) = writer.write(msg.as_bytes()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9monly allowed inside `async` functions and blocks\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::select_internal` which comes from the expansion of the macro `select` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"no method named `recv` found for struct `Sender` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":9756,"byte_end":9760,"line_start":206,"line_end":206,"column_start":54,"column_end":58,"is_primary":true,"text":[{"text":"                                block = sender_clone.recv() => {","highlight_start":54,"highlight_end":58}],"label":"method not found in `Sender<BlockNode>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `recv` found for struct `Sender` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:206:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   block = sender_clone.recv() => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Sender<BlockNode>`\u001b[0m\n\n"}
{"message":"no method named `recv` found for struct `Sender` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":10425,"byte_end":10429,"line_start":217,"line_end":217,"column_start":52,"column_end":56,"is_primary":true,"text":[{"text":"                                tx = sender_clone2.recv() => {","highlight_start":52,"highlight_end":56}],"label":"method not found in `Sender<Transaction>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `recv` found for struct `Sender` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:217:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   tx = sender_clone2.recv() => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Sender<Transaction>`\u001b[0m\n\n"}
{"message":"no method named `recv` found for struct `Sender` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"lib_network/src/p2pnetwork.rs","byte_start":11094,"byte_end":11098,"line_start":228,"line_end":228,"column_start":58,"column_end":62,"is_primary":true,"text":[{"text":"                                block_id = sender_clone3.recv() => {","highlight_start":58,"highlight_end":62}],"label":"method not found in `Sender<String>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `recv` found for struct `Sender` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib_network/src/p2pnetwork.rs:228:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   block_id = sender_clone3.recv() => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Sender<String>`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 7 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 7 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0599, E0728.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0599, E0728.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0599`.\u001b[0m\n"}
